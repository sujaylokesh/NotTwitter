// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: commonpb.proto

package commonpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Backend Struct Definitions
type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	User     string `protobuf:"bytes,2,opt,name=User,proto3" json:"User,omitempty"`
	PostDate int64  `protobuf:"varint,3,opt,name=PostDate,proto3" json:"PostDate,omitempty"`
	Title    string `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`
	Content  string `protobuf:"bytes,5,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{0}
}

func (x *Article) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Article) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Article) GetPostDate() int64 {
	if x != nil {
		return x.PostDate
	}
	return 0
}

func (x *Article) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Article) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// Requests
type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{1}
}

func (x *Request) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request bool `protobuf:"varint,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *BoolRequest) Reset() {
	*x = BoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolRequest) ProtoMessage() {}

func (x *BoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolRequest.ProtoReflect.Descriptor instead.
func (*BoolRequest) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{2}
}

func (x *BoolRequest) GetRequest() bool {
	if x != nil {
		return x.Request
	}
	return false
}

type ArticleIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ArticleIDRequest) Reset() {
	*x = ArticleIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleIDRequest) ProtoMessage() {}

func (x *ArticleIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleIDRequest.ProtoReflect.Descriptor instead.
func (*ArticleIDRequest) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{3}
}

func (x *ArticleIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UsernameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *UsernameRequest) Reset() {
	*x = UsernameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameRequest) ProtoMessage() {}

func (x *UsernameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameRequest.ProtoReflect.Descriptor instead.
func (*UsernameRequest) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{4}
}

func (x *UsernameRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type NewArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title            string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content          string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	User             string `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	TimestampSeconds int64  `protobuf:"varint,4,opt,name=timestampSeconds,proto3" json:"timestampSeconds,omitempty"`
}

func (x *NewArticleRequest) Reset() {
	*x = NewArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewArticleRequest) ProtoMessage() {}

func (x *NewArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewArticleRequest.ProtoReflect.Descriptor instead.
func (*NewArticleRequest) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{5}
}

func (x *NewArticleRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewArticleRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *NewArticleRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *NewArticleRequest) GetTimestampSeconds() int64 {
	if x != nil {
		return x.TimestampSeconds
	}
	return 0
}

type AccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AccountRequest) Reset() {
	*x = AccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRequest) ProtoMessage() {}

func (x *AccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRequest.ProtoReflect.Descriptor instead.
func (*AccountRequest) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{6}
}

func (x *AccountRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *AccountRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type FollowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowUser string `protobuf:"bytes,1,opt,name=followUser,proto3" json:"followUser,omitempty"`
	ThisUser   string `protobuf:"bytes,2,opt,name=thisUser,proto3" json:"thisUser,omitempty"`
}

func (x *FollowRequest) Reset() {
	*x = FollowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowRequest) ProtoMessage() {}

func (x *FollowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowRequest.ProtoReflect.Descriptor instead.
func (*FollowRequest) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{7}
}

func (x *FollowRequest) GetFollowUser() string {
	if x != nil {
		return x.FollowUser
	}
	return ""
}

func (x *FollowRequest) GetThisUser() string {
	if x != nil {
		return x.ThisUser
	}
	return ""
}

// Replies
type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{8}
}

func (x *Reply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UsernameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *UsernameReply) Reset() {
	*x = UsernameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameReply) ProtoMessage() {}

func (x *UsernameReply) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameReply.ProtoReflect.Descriptor instead.
func (*UsernameReply) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{9}
}

func (x *UsernameReply) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type BoolReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply bool `protobuf:"varint,1,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *BoolReply) Reset() {
	*x = BoolReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolReply) ProtoMessage() {}

func (x *BoolReply) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolReply.ProtoReflect.Descriptor instead.
func (*BoolReply) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{10}
}

func (x *BoolReply) GetReply() bool {
	if x != nil {
		return x.Reply
	}
	return false
}

type UsernameListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FollowList []string `protobuf:"bytes,1,rep,name=followList,proto3" json:"followList,omitempty"`
}

func (x *UsernameListReply) Reset() {
	*x = UsernameListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernameListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameListReply) ProtoMessage() {}

func (x *UsernameListReply) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameListReply.ProtoReflect.Descriptor instead.
func (*UsernameListReply) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{11}
}

func (x *UsernameListReply) GetFollowList() []string {
	if x != nil {
		return x.FollowList
	}
	return nil
}

type IsFollowedReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Found bool  `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	Index int64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *IsFollowedReply) Reset() {
	*x = IsFollowedReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsFollowedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsFollowedReply) ProtoMessage() {}

func (x *IsFollowedReply) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsFollowedReply.ProtoReflect.Descriptor instead.
func (*IsFollowedReply) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{12}
}

func (x *IsFollowedReply) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *IsFollowedReply) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ArticleListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Articles []*Article `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
}

func (x *ArticleListReply) Reset() {
	*x = ArticleListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleListReply) ProtoMessage() {}

func (x *ArticleListReply) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleListReply.ProtoReflect.Descriptor instead.
func (*ArticleListReply) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{13}
}

func (x *ArticleListReply) GetArticles() []*Article {
	if x != nil {
		return x.Articles
	}
	return nil
}

type ArticleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Article *Article `protobuf:"bytes,1,opt,name=article,proto3" json:"article,omitempty"`
}

func (x *ArticleReply) Reset() {
	*x = ArticleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commonpb_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleReply) ProtoMessage() {}

func (x *ArticleReply) ProtoReflect() protoreflect.Message {
	mi := &file_commonpb_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleReply.ProtoReflect.Descriptor instead.
func (*ArticleReply) Descriptor() ([]byte, []int) {
	return file_commonpb_proto_rawDescGZIP(), []int{14}
}

func (x *ArticleReply) GetArticle() *Article {
	if x != nil {
		return x.Article
	}
	return nil
}

var File_commonpb_proto protoreflect.FileDescriptor

var file_commonpb_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x22, 0x79, 0x0a, 0x07, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x6f, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x23, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x10, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x48, 0x0a, 0x0e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x4b, 0x0a, 0x0d, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x68, 0x69, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x69, 0x73, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x21, 0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x33, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x0f, 0x49,
	0x73, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x41, 0x0a, 0x10, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d,
	0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x3b, 0x0a,
	0x0c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a,
	0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x32, 0xc4, 0x01, 0x0a, 0x04, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x0e, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x11, 0x45, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x4e, 0x6f, 0x74,
	0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x32, 0xcc, 0x06, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x3e, 0x0a,
	0x0b, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x13, 0x69, 0x73, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0a, 0x49, 0x73,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x49, 0x73, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x17, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x41, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x65, 0x77, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70,
	0x62, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commonpb_proto_rawDescOnce sync.Once
	file_commonpb_proto_rawDescData = file_commonpb_proto_rawDesc
)

func file_commonpb_proto_rawDescGZIP() []byte {
	file_commonpb_proto_rawDescOnce.Do(func() {
		file_commonpb_proto_rawDescData = protoimpl.X.CompressGZIP(file_commonpb_proto_rawDescData)
	})
	return file_commonpb_proto_rawDescData
}

var file_commonpb_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_commonpb_proto_goTypes = []interface{}{
	(*Article)(nil),           // 0: commonpb.Article
	(*Request)(nil),           // 1: commonpb.Request
	(*BoolRequest)(nil),       // 2: commonpb.BoolRequest
	(*ArticleIDRequest)(nil),  // 3: commonpb.ArticleIDRequest
	(*UsernameRequest)(nil),   // 4: commonpb.UsernameRequest
	(*NewArticleRequest)(nil), // 5: commonpb.NewArticleRequest
	(*AccountRequest)(nil),    // 6: commonpb.AccountRequest
	(*FollowRequest)(nil),     // 7: commonpb.FollowRequest
	(*Reply)(nil),             // 8: commonpb.Reply
	(*UsernameReply)(nil),     // 9: commonpb.UsernameReply
	(*BoolReply)(nil),         // 10: commonpb.BoolReply
	(*UsernameListReply)(nil), // 11: commonpb.UsernameListReply
	(*IsFollowedReply)(nil),   // 12: commonpb.IsFollowedReply
	(*ArticleListReply)(nil),  // 13: commonpb.ArticleListReply
	(*ArticleReply)(nil),      // 14: commonpb.ArticleReply
}
var file_commonpb_proto_depIdxs = []int32{
	0,  // 0: commonpb.ArticleListReply.articles:type_name -> commonpb.Article
	0,  // 1: commonpb.ArticleReply.article:type_name -> commonpb.Article
	2,  // 2: commonpb.Auth.EnsureLoggedIn:input_type -> commonpb.BoolRequest
	2,  // 3: commonpb.Auth.EnsureNotLoggedIn:input_type -> commonpb.BoolRequest
	1,  // 4: commonpb.Auth.SetUserStatus:input_type -> commonpb.Request
	6,  // 5: commonpb.Backend.IsUserValid:input_type -> commonpb.AccountRequest
	6,  // 6: commonpb.Backend.RegisterNewUser:input_type -> commonpb.AccountRequest
	4,  // 7: commonpb.Backend.isUsernameAvailable:input_type -> commonpb.UsernameRequest
	7,  // 8: commonpb.Backend.IsFollowed:input_type -> commonpb.FollowRequest
	7,  // 9: commonpb.Backend.AddFollow:input_type -> commonpb.FollowRequest
	7,  // 10: commonpb.Backend.RemoveFollow:input_type -> commonpb.FollowRequest
	4,  // 11: commonpb.Backend.GetFollowedUsers:input_type -> commonpb.UsernameRequest
	1,  // 12: commonpb.Backend.GetAllArticles:input_type -> commonpb.Request
	4,  // 13: commonpb.Backend.GetSomeArticles:input_type -> commonpb.UsernameRequest
	3,  // 14: commonpb.Backend.GetArticleByID:input_type -> commonpb.ArticleIDRequest
	4,  // 15: commonpb.Backend.GetArticleByUser:input_type -> commonpb.UsernameRequest
	5,  // 16: commonpb.Backend.CreateNewArticle:input_type -> commonpb.NewArticleRequest
	10, // 17: commonpb.Auth.EnsureLoggedIn:output_type -> commonpb.BoolReply
	10, // 18: commonpb.Auth.EnsureNotLoggedIn:output_type -> commonpb.BoolReply
	10, // 19: commonpb.Auth.SetUserStatus:output_type -> commonpb.BoolReply
	10, // 20: commonpb.Backend.IsUserValid:output_type -> commonpb.BoolReply
	10, // 21: commonpb.Backend.RegisterNewUser:output_type -> commonpb.BoolReply
	10, // 22: commonpb.Backend.isUsernameAvailable:output_type -> commonpb.BoolReply
	12, // 23: commonpb.Backend.IsFollowed:output_type -> commonpb.IsFollowedReply
	8,  // 24: commonpb.Backend.AddFollow:output_type -> commonpb.Reply
	8,  // 25: commonpb.Backend.RemoveFollow:output_type -> commonpb.Reply
	11, // 26: commonpb.Backend.GetFollowedUsers:output_type -> commonpb.UsernameListReply
	13, // 27: commonpb.Backend.GetAllArticles:output_type -> commonpb.ArticleListReply
	13, // 28: commonpb.Backend.GetSomeArticles:output_type -> commonpb.ArticleListReply
	14, // 29: commonpb.Backend.GetArticleByID:output_type -> commonpb.ArticleReply
	13, // 30: commonpb.Backend.GetArticleByUser:output_type -> commonpb.ArticleListReply
	14, // 31: commonpb.Backend.CreateNewArticle:output_type -> commonpb.ArticleReply
	17, // [17:32] is the sub-list for method output_type
	2,  // [2:17] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_commonpb_proto_init() }
func file_commonpb_proto_init() {
	if File_commonpb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commonpb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernameListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsFollowedReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commonpb_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commonpb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_commonpb_proto_goTypes,
		DependencyIndexes: file_commonpb_proto_depIdxs,
		MessageInfos:      file_commonpb_proto_msgTypes,
	}.Build()
	File_commonpb_proto = out.File
	file_commonpb_proto_rawDesc = nil
	file_commonpb_proto_goTypes = nil
	file_commonpb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	// isUserValid(username, password string) bool
	EnsureLoggedIn(ctx context.Context, in *BoolRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// registerNewUser(username, password string) (*user, error)
	EnsureNotLoggedIn(ctx context.Context, in *BoolRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// isUsernameAvailable(username string) bool
	SetUserStatus(ctx context.Context, in *Request, opts ...grpc.CallOption) (*BoolReply, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) EnsureLoggedIn(ctx context.Context, in *BoolRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/commonpb.Auth/EnsureLoggedIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) EnsureNotLoggedIn(ctx context.Context, in *BoolRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/commonpb.Auth/EnsureNotLoggedIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SetUserStatus(ctx context.Context, in *Request, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/commonpb.Auth/SetUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	// isUserValid(username, password string) bool
	EnsureLoggedIn(context.Context, *BoolRequest) (*BoolReply, error)
	// registerNewUser(username, password string) (*user, error)
	EnsureNotLoggedIn(context.Context, *BoolRequest) (*BoolReply, error)
	// isUsernameAvailable(username string) bool
	SetUserStatus(context.Context, *Request) (*BoolReply, error)
}

// UnimplementedAuthServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (*UnimplementedAuthServer) EnsureLoggedIn(context.Context, *BoolRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnsureLoggedIn not implemented")
}
func (*UnimplementedAuthServer) EnsureNotLoggedIn(context.Context, *BoolRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnsureNotLoggedIn not implemented")
}
func (*UnimplementedAuthServer) SetUserStatus(context.Context, *Request) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserStatus not implemented")
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_EnsureLoggedIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).EnsureLoggedIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Auth/EnsureLoggedIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).EnsureLoggedIn(ctx, req.(*BoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_EnsureNotLoggedIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).EnsureNotLoggedIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Auth/EnsureNotLoggedIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).EnsureNotLoggedIn(ctx, req.(*BoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SetUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SetUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Auth/SetUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SetUserStatus(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commonpb.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnsureLoggedIn",
			Handler:    _Auth_EnsureLoggedIn_Handler,
		},
		{
			MethodName: "EnsureNotLoggedIn",
			Handler:    _Auth_EnsureNotLoggedIn_Handler,
		},
		{
			MethodName: "SetUserStatus",
			Handler:    _Auth_SetUserStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commonpb.proto",
}

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackendClient interface {
	// user
	// isUserValid(username, password string) bool
	IsUserValid(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// registerNewUser(username, password string) (*user, error)
	RegisterNewUser(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// isUsernameAvailable(username string) bool
	IsUsernameAvailable(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*BoolReply, error)
	// isFollowed(username string) (bool, int, error)
	IsFollowed(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*IsFollowedReply, error)
	// addFollow(userToFollow string) error
	AddFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*Reply, error)
	// removeFollow(userToUnfollow string) error
	RemoveFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*Reply, error)
	// getFollowedUsers() ([]string, error)
	GetFollowedUsers(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*UsernameListReply, error)
	// article
	// getAllArticles() []article
	GetAllArticles(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ArticleListReply, error)
	// getSomeArticles() []article
	GetSomeArticles(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*ArticleListReply, error)
	// getArticleByID(id int) (*article, error)
	GetArticleByID(ctx context.Context, in *ArticleIDRequest, opts ...grpc.CallOption) (*ArticleReply, error)
	// getArticleByUser(user string) ([]article, error)
	GetArticleByUser(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*ArticleListReply, error)
	// createNewArticle(title, content string, user string, timestampSeconds string) (*article, error)
	CreateNewArticle(ctx context.Context, in *NewArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) IsUserValid(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/commonpb.Backend/IsUserValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) RegisterNewUser(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/commonpb.Backend/RegisterNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) IsUsernameAvailable(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/commonpb.Backend/isUsernameAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) IsFollowed(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*IsFollowedReply, error) {
	out := new(IsFollowedReply)
	err := c.cc.Invoke(ctx, "/commonpb.Backend/IsFollowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) AddFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/commonpb.Backend/AddFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) RemoveFollow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/commonpb.Backend/RemoveFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetFollowedUsers(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*UsernameListReply, error) {
	out := new(UsernameListReply)
	err := c.cc.Invoke(ctx, "/commonpb.Backend/GetFollowedUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetAllArticles(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ArticleListReply, error) {
	out := new(ArticleListReply)
	err := c.cc.Invoke(ctx, "/commonpb.Backend/GetAllArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetSomeArticles(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*ArticleListReply, error) {
	out := new(ArticleListReply)
	err := c.cc.Invoke(ctx, "/commonpb.Backend/GetSomeArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetArticleByID(ctx context.Context, in *ArticleIDRequest, opts ...grpc.CallOption) (*ArticleReply, error) {
	out := new(ArticleReply)
	err := c.cc.Invoke(ctx, "/commonpb.Backend/GetArticleByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) GetArticleByUser(ctx context.Context, in *UsernameRequest, opts ...grpc.CallOption) (*ArticleListReply, error) {
	out := new(ArticleListReply)
	err := c.cc.Invoke(ctx, "/commonpb.Backend/GetArticleByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) CreateNewArticle(ctx context.Context, in *NewArticleRequest, opts ...grpc.CallOption) (*ArticleReply, error) {
	out := new(ArticleReply)
	err := c.cc.Invoke(ctx, "/commonpb.Backend/CreateNewArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServer is the server API for Backend service.
type BackendServer interface {
	// user
	// isUserValid(username, password string) bool
	IsUserValid(context.Context, *AccountRequest) (*BoolReply, error)
	// registerNewUser(username, password string) (*user, error)
	RegisterNewUser(context.Context, *AccountRequest) (*BoolReply, error)
	// isUsernameAvailable(username string) bool
	IsUsernameAvailable(context.Context, *UsernameRequest) (*BoolReply, error)
	// isFollowed(username string) (bool, int, error)
	IsFollowed(context.Context, *FollowRequest) (*IsFollowedReply, error)
	// addFollow(userToFollow string) error
	AddFollow(context.Context, *FollowRequest) (*Reply, error)
	// removeFollow(userToUnfollow string) error
	RemoveFollow(context.Context, *FollowRequest) (*Reply, error)
	// getFollowedUsers() ([]string, error)
	GetFollowedUsers(context.Context, *UsernameRequest) (*UsernameListReply, error)
	// article
	// getAllArticles() []article
	GetAllArticles(context.Context, *Request) (*ArticleListReply, error)
	// getSomeArticles() []article
	GetSomeArticles(context.Context, *UsernameRequest) (*ArticleListReply, error)
	// getArticleByID(id int) (*article, error)
	GetArticleByID(context.Context, *ArticleIDRequest) (*ArticleReply, error)
	// getArticleByUser(user string) ([]article, error)
	GetArticleByUser(context.Context, *UsernameRequest) (*ArticleListReply, error)
	// createNewArticle(title, content string, user string, timestampSeconds string) (*article, error)
	CreateNewArticle(context.Context, *NewArticleRequest) (*ArticleReply, error)
}

// UnimplementedBackendServer can be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (*UnimplementedBackendServer) IsUserValid(context.Context, *AccountRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserValid not implemented")
}
func (*UnimplementedBackendServer) RegisterNewUser(context.Context, *AccountRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewUser not implemented")
}
func (*UnimplementedBackendServer) IsUsernameAvailable(context.Context, *UsernameRequest) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUsernameAvailable not implemented")
}
func (*UnimplementedBackendServer) IsFollowed(context.Context, *FollowRequest) (*IsFollowedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFollowed not implemented")
}
func (*UnimplementedBackendServer) AddFollow(context.Context, *FollowRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollow not implemented")
}
func (*UnimplementedBackendServer) RemoveFollow(context.Context, *FollowRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFollow not implemented")
}
func (*UnimplementedBackendServer) GetFollowedUsers(context.Context, *UsernameRequest) (*UsernameListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowedUsers not implemented")
}
func (*UnimplementedBackendServer) GetAllArticles(context.Context, *Request) (*ArticleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllArticles not implemented")
}
func (*UnimplementedBackendServer) GetSomeArticles(context.Context, *UsernameRequest) (*ArticleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSomeArticles not implemented")
}
func (*UnimplementedBackendServer) GetArticleByID(context.Context, *ArticleIDRequest) (*ArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleByID not implemented")
}
func (*UnimplementedBackendServer) GetArticleByUser(context.Context, *UsernameRequest) (*ArticleListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleByUser not implemented")
}
func (*UnimplementedBackendServer) CreateNewArticle(context.Context, *NewArticleRequest) (*ArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewArticle not implemented")
}

func RegisterBackendServer(s *grpc.Server, srv BackendServer) {
	s.RegisterService(&_Backend_serviceDesc, srv)
}

func _Backend_IsUserValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).IsUserValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Backend/IsUserValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).IsUserValid(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_RegisterNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).RegisterNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Backend/RegisterNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).RegisterNewUser(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_IsUsernameAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).IsUsernameAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Backend/IsUsernameAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).IsUsernameAvailable(ctx, req.(*UsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_IsFollowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).IsFollowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Backend/IsFollowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).IsFollowed(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_AddFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).AddFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Backend/AddFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).AddFollow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_RemoveFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).RemoveFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Backend/RemoveFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).RemoveFollow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetFollowedUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetFollowedUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Backend/GetFollowedUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetFollowedUsers(ctx, req.(*UsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetAllArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetAllArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Backend/GetAllArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetAllArticles(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetSomeArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetSomeArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Backend/GetSomeArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetSomeArticles(ctx, req.(*UsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetArticleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArticleIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetArticleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Backend/GetArticleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetArticleByID(ctx, req.(*ArticleIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_GetArticleByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).GetArticleByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Backend/GetArticleByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).GetArticleByUser(ctx, req.(*UsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_CreateNewArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).CreateNewArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.Backend/CreateNewArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).CreateNewArticle(ctx, req.(*NewArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Backend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commonpb.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsUserValid",
			Handler:    _Backend_IsUserValid_Handler,
		},
		{
			MethodName: "RegisterNewUser",
			Handler:    _Backend_RegisterNewUser_Handler,
		},
		{
			MethodName: "isUsernameAvailable",
			Handler:    _Backend_IsUsernameAvailable_Handler,
		},
		{
			MethodName: "IsFollowed",
			Handler:    _Backend_IsFollowed_Handler,
		},
		{
			MethodName: "AddFollow",
			Handler:    _Backend_AddFollow_Handler,
		},
		{
			MethodName: "RemoveFollow",
			Handler:    _Backend_RemoveFollow_Handler,
		},
		{
			MethodName: "GetFollowedUsers",
			Handler:    _Backend_GetFollowedUsers_Handler,
		},
		{
			MethodName: "GetAllArticles",
			Handler:    _Backend_GetAllArticles_Handler,
		},
		{
			MethodName: "GetSomeArticles",
			Handler:    _Backend_GetSomeArticles_Handler,
		},
		{
			MethodName: "GetArticleByID",
			Handler:    _Backend_GetArticleByID_Handler,
		},
		{
			MethodName: "GetArticleByUser",
			Handler:    _Backend_GetArticleByUser_Handler,
		},
		{
			MethodName: "CreateNewArticle",
			Handler:    _Backend_CreateNewArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commonpb.proto",
}
